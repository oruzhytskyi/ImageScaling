//---------------------------------------------------------------------------


#pragma hdrstop

#include "AlgCollection.h"

//---------------------------------------------------------------------------

#pragma package(smart_init)
void AlgCollection::nearestNeighbor(Array* iarr, Array* oarr)
{
  for(int i=0;i<iarr->getn();i++)
  for(int j=0;j<iarr->getm();j++)
  {
    oarr->setel(2*i,2*j,iarr->getel(i,j));
    oarr->setel(2*i,2*j+1,iarr->getel(i,j));
    oarr->setel(2*i+1,2*j,iarr->getel(i,j));
    oarr->setel(2*i+1,2*j+1,iarr->getel(i,j));
  }
};

void AlgCollection::bicubicInterpolation(Array* iarr, Array* oarr)
{
  int n=iarr->getn();
  int m=iarr->getm();
  long a=0,c=0;
  int size=4;

  long** f=new long*[size];
  for(int i=0;i<size;i++) f[i]=new long[size];

  long* b=new long[size*size];

/*  for(int i=0;i<n-2;i++)
  for(int j=0;j<m-2;j++)
  {
    bicubicNearestMatrCoords(i,j,n,m,size,a,c);
    bicubicNearestPointsMatr(a,c,size,f,iarr);

    bicubicGetCoeficients(i-a+1,j-c,b);
    oarr->setel(i*2+1,j*2,(TColor)bicubicFunction(b,f));

    bicubicGetCoeficients(i-a,j-c+1,b);
    oarr->setel(i*2,j*2+1,(TColor)bicubicFunction(b,f));

    bicubicGetCoeficients(i-a+1,j-c+1,b);
    oarr->setel(i*2+1,j*2+1,(TColor)bicubicFunction(b,f));
  };
*/
};

void makeLowTriangMatr(Array* ia, FlArray* oa)
{
  for(int i=0;i<ia->getn();i++)
  for(int j=0;j<ia->getm();i++)
  {

  }
};


long AlgCollection::getAforL(int x, int y, Array* arr)
{
  Array* sarr= new Array(arr->getn()-1, arr->getm()-1);
  makeSubArr(x,y,arr,sarr);
  long det=getDetForL(sarr);
  return (long)pow(-1,x+y)*det;
};
long AlgCollection::getDetForL(Array* arr)
{
  long res=1;
  for(int i=0;i<arr->getn();i++)
  res=res*arr->getel(i,i);
  return res;
};
void AlgCollection::makeSubArr(int x, int y, Array* ia, Array *oa)
{
  for(int i=0;i<oa->getn();i++)
  for(int j=0;j<oa->getm();j++)
  {
    int ii=i, jj=j;
    if(i>=x){ii++;};
    if(j>=y){jj++;};
    oa->setel(i,j,ia->getel(ii,jj));
  };
};


void AlgCollection::bicubicNearestPointsMatr(long a, long b, int size, long** f, Array* arr)
{
  for(int i=0;i<size;i++)
  for(int j=0;j<size;j++)
  f[i][j]=arr->getel(a+i,b+j);
};

void AlgCollection::bicubicNearestMatrCoords(long x, long y, long n, long m, int size, long& a, long& b)
{
  a=x-1;
  b=y-1;
  if(x<(long)size/2) {a=0;};
  if(y<(long)size/2) {b=0;};
  if(x>n-(long)size/2-1) {a=n-(long)size/2-1;};
  if(y>m-(long)size/2-1) {b=m-(long)size/2-1;};
};

long AlgCollection::bicubicFunction(long* b, long** f)
{
  return b[0]*f[1][1]+ b[1]*f[1][2]+b[2]*f[2][1]+b[3]*f[2][2]+b[4]*f[1][0]+b[5]*f[0][1]+b[6]*f[2][0]+b[7]*f[0][2]+b[8]*f[1][3]+b[9]*f[3][1]+b[10]*f[0][0]+b[11]*f[2][3]+ b[12]*f[3][2]+b[13]*f[0][3]+ b[14]*f[3][0]+ b[15]*f[3][3];
};

void AlgCollection::bicubicGetCoeficients(long x, long y, long* b)
{
  b[0]=(long)((x-1)*(x-2)*(x+1)*(y-1)*(y-2)*(y+1)/4);
  b[1]=(long)(-(x)*(x-2)*(x+1)*(y-1)*(y-2)*(y+1)/4);
  b[2]=(long)(-(y)*(x-1)*(x-2)*(x+1)*(y-2)*(y+1)/4);
  b[3]=(long)(x*y*(x-2)*(x+1)*(y-2)*(y+1)/4);
  b[4]=(long)(-x*(x-2)*(x-1)*(y-1)*(y-2)*(y+1)/12);
  b[5]=(long)(-y*(x-2)*(x-1)*(x+1)*(y-2)*(y-1)/12);
  b[6]=(long)(x*y*(x-2)*(x-1)*(y-2)*(y+1)/12);
  b[7]=(long)(x*y*(x-2)*(x+1)*(y-2)*(y-1)/12);
  b[8]=(long)(x*(x-1)*(x+1)*(y-2)*(y-1)*(y+1)/12);
  b[9]=(long)(y*(x-1)*(x-2)*(x+1)*(y-1)*(y+1)/12);
  b[10]=(long)(x*y*(x-1)*(x-2)*(y-1)*(y-2)/36);
  b[11]=(long)(-x*y*(x-1)*(x+1)*(y+1)*(y-2)/12);
  b[12]=(long)(-x*y*(x-2)*(x+1)*(y+1)*(y-1)/12);
  b[13]=(long)(-x*y*(x-1)*(x+1)*(y-2)*(y-1)/36);
  b[14]=(long)(-x*y*(x-1)*(x-2)*(y-1)*(y+1)/36);
  b[15]=(long)(x*y*(x-1)*(x+1)*(y-1)*(y+1)/36);
};

Array::Array(int n, int m)
{
    this->n=n;
    this->m=m;
    a=new long*[n];
    for(int i=0;i<n;i++)
    a[i]=new long[m];
};

FlArray::FlArray(int n, int m)
{
    this->n=n;
    this->m=m;
    a=new float*[n];
    for(int i=0;i<n;i++)
    a[i]=new float[m];
};
